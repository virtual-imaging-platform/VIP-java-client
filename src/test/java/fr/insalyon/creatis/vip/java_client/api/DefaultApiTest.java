/*
 * CARMIN a Common web API for Remote pipeline INvocation
 * FLI/IAM REST API for exchanging data and remote calling pipelines.
 *
 * OpenAPI spec version: 0.2.1
 * Contact: carmin@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package fr.insalyon.creatis.vip.java_client.api;

import fr.insalyon.creatis.vip.java_client.ApiException;
import fr.insalyon.creatis.vip.java_client.model.DeleteExecutionConfiguration;
import fr.insalyon.creatis.vip.java_client.model.ErrorCodeAndMessage;
import fr.insalyon.creatis.vip.java_client.model.Execution;
import fr.insalyon.creatis.vip.java_client.model.Pipeline;
import fr.insalyon.creatis.vip.java_client.model.PlatformProperties;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * 
     *
     * Delete an execution. This will kill the underlying processes (if possible) and free all resources associated with this execution (depending of the configuration given in as body input).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteExecutionTest() throws ApiException {
        String executionIdentifier = null;
        DeleteExecutionConfiguration body = null;
        api.deleteExecution(executionIdentifier, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get information about an execution
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExecutionTest() throws ApiException {
        String executionIdentifier = null;
        Execution response = api.getExecution(executionIdentifier);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get the result files of the execution
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExecutionResultsTest() throws ApiException {
        String executionIdentifier = null;
        String protocol = null;
        List<String> response = api.getExecutionResults(executionIdentifier, protocol);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Show the definition of a given pipeline
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPipelineTest() throws ApiException {
        String pipelineIdentifier = null;
        Pipeline response = api.getPipeline(pipelineIdentifier);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns information about the platform. https must be supported in the list of the supported protocols.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlatformPropertiesTest() throws ApiException {
        PlatformProperties response = api.getPlatformProperties();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get stderr of an execution
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStderrTest() throws ApiException {
        String executionIdentifier = null;
        String response = api.getStderr(executionIdentifier);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get stdout of an execution
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStdoutTest() throws ApiException {
        String executionIdentifier = null;
        String response = api.getStdout(executionIdentifier);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Initializes an execution and start it. The successful response must contain the execution identifier.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void initAndStartExecutionTest() throws ApiException {
        Execution body = null;
        Execution response = api.initAndStartExecution(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Initializes an execution. Does not start it. The successful response must contain the execution identifier.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void initExecutionTest() throws ApiException {
        Execution body = null;
        Execution response = api.initExecution(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * kill an execution
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void killExecutionTest() throws ApiException {
        String executionIdentifier = null;
        api.killExecution(executionIdentifier);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list all execution Ids in the platform which are ordered in decreasing submission time. All the executions that were launched by the user must be returned. It is up to the platform to return executions that the user did not launch. When studyIdentifier is present, all the executions that the user launched in the study must be returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listExecutionsTest() throws ApiException {
        List<Execution> response = api.listExecutions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * All the pipelines that the user can execute must be returned. It is up to the platform to return pipelines that the user cannot execute. When studyIdentifier is present, all the pipelines that the user can execute in the study must be returned. In this case, execution rights denote the rights to execute the pipeline in the study.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPipelinesTest() throws ApiException {
        String studyIdentifier = null;
        List<Pipeline> response = api.listPipelines(studyIdentifier);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * play an execution
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void playExecutionTest() throws ApiException {
        String executionIdentifier = null;
        api.playExecution(executionIdentifier);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify an execution. Only the name and the timeout of the execution can be modified. Changes to the identifier or the status will raise errors. Changes to the other properties will be ignored.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateExecutionTest() throws ApiException {
        String executionIdentifier = null;
        Execution body = null;
        api.updateExecution(executionIdentifier, body);

        // TODO: test validations
    }
    
}
